{"version":3,"sources":["helpers/history.js","constants/post.constant.js","reducers/posts.reducer.js","helpers/store.js","reducers/index.js","middlewares/post.middleware.js","services/post.service.js","actions/post.action.js","components/PostList.jsx","pages/HomePage.jsx","components/Post.jsx","pages/SinglePostPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","postConstants","GET_POST_REQUEST","GET_POST_SUCCESS","GET_POST_FAILURE","GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","CLEAR_POSTS","POSTS_NEXT_PAGE","SET_BLANK_POST","posts","state","arguments","length","undefined","nextPage","action","type","Object","objectSpread","error","loading","concat","toConsumableArray","post","page","blank","payload","store","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","routerMiddleware","thunkMiddleware","next","now","Date","month","getMonth","getYear","postsViewed","JSON","parse","localStorage","getItem","indexOf","slug","dispatch","push","setItem","stringify","apiUrl","postService","getPosts","fetch","method","then","handleResponse","getPost","response","text","data","ok","message","statusText","Promise","reject","postActions","current_page","failure","toString","clearPosts","PostList","_ref","postList","map","react_default","a","createElement","ListGroup_default","Item","key","Row_default","Col_default","xs","md","categories","name","Link","to","dangerouslySetInnerHTML","__html","title","excerpt","Image_default","width","src","author","avatar_url","roundedCircle","first_name","last_name","moment","date","fromNow","style","textAlign","span","offset","comments_count","featured_image","attachment_meta","sizes","medium","url","alt","description","Card_default","HomePage","this","props","Fragment","className","components_PostList","React","Component","connectedHomePage","connect","Post","locale","Title","dateTime","format","Body","Img","source","Text","content","SinglePostPage","components_Post","connectedSinglePostPage","ownProps","match","params","App","BrowserRouter","Navbar_default","Brand","href","Toggle","Container_default","Route","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","es","esm","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba8cf8b7.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","export const postConstants = {\r\n  GET_POST_REQUEST: 'GET_POST_REQUEST',\r\n  GET_POST_SUCCESS: 'GET_POST_SUCCESS',\r\n  GET_POST_FAILURE: 'GET_POST_FAILURE',\r\n\r\n  GET_POSTS_REQUEST: 'GET_POSTS_REQUEST',\r\n  GET_POSTS_SUCCESS: 'GET_POSTS_SUCCESS',\r\n  GET_POSTS_FAILURE: 'GET_POSTS_FAILURE',\r\n\r\n  CLEAR_POSTS: 'CLEAR_POSTS',\r\n  POSTS_NEXT_PAGE: 'POSTS_NEXT_PAGE',\r\n\r\n  SET_BLANK_POST: 'SET_BLANK_POST',\r\n};\r\n","import { postConstants } from '../constants';\r\n\r\nexport function posts(state = { posts: [], nextPage: 1}, action) {\r\n  switch (action.type) {\r\n    case postConstants.GET_POSTS_REQUEST:\r\n    case postConstants.GET_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        error: undefined,\r\n        loading: true\r\n      };\r\n    case postConstants.GET_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        posts: [...state.posts, ...action.posts] \r\n      };\r\n    case postConstants.GET_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        post: action.post \r\n      };\r\n    case postConstants.CLEAR_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: []\r\n      };\r\n    case postConstants.POSTS_NEXT_PAGE:\r\n      return {\r\n        ...state,\r\n        nextPage: action.page\r\n      };\r\n    case postConstants.SET_BLANK_POST:\r\n      return {\r\n        ...state,\r\n        blank: action.payload\r\n      };\r\n    case postConstants.GET_POSTS_FAILURE:\r\n    case postConstants.GET_POST_FAILURE:\r\n      return { \r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { routerMiddleware } from 'connected-react-router';\r\n\r\nimport { history } from './';\r\nimport createRootReducer from '../reducers';\r\nimport { postMiddleware } from '../middlewares';\r\n\r\nexport const store = createStore(\r\n  createRootReducer(history),\r\n  compose(\r\n    applyMiddleware(\r\n      routerMiddleware(history),\r\n      thunkMiddleware,\r\n      postMiddleware(),\r\n    ),\r\n  )\r\n);\r\n","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport { posts } from './posts.reducer';\r\n\r\nexport default (history) => combineReducers({\r\n  router: connectRouter(history),\r\n  posts\r\n});\r\n","import { postConstants } from '../constants';\r\n\r\nexport function postMiddleware() {\r\n  return store => next => action => {\r\n    if (action.type === postConstants.GET_POST_SUCCESS) {\r\n      const now = new Date();\r\n      const month = now.getMonth() + '-' + now.getYear();\r\n      let postsViewed = JSON.parse(localStorage.getItem('posts_viewed'));\r\n      if (!postsViewed) {\r\n        postsViewed = {};\r\n      }\r\n      if (!postsViewed[month]) {\r\n        postsViewed[month] = [];\r\n      }\r\n      if (postsViewed[month].indexOf(action.post.slug) === -1 && postsViewed[month].length === 5) {\r\n         return store.dispatch({ type: postConstants.SET_BLANK_POST, payload: true });\r\n      } else if (postsViewed[month].indexOf(action.post.slug) === -1) {\r\n        postsViewed[month].push(action.post.slug);\r\n        localStorage.setItem('posts_viewed', JSON.stringify(postsViewed));\r\n      }\r\n      store.dispatch({ type: postConstants.SET_BLANK_POST, payload: false });\r\n    }\r\n    next(action);\r\n  }\r\n}\r\n","const apiUrl = 'https://id.techinasia.com/wp-json/techinasia/3.0/posts';\r\n\r\nexport const postService = {\r\n  getPosts,\r\n  getPost,\r\n};\r\n\r\n\r\n\r\nfunction getPosts(page = 1) {\r\n  const requestOptions = {\r\n    method: 'GET'\r\n  };\r\n\r\n  return fetch(`${apiUrl}?page=${page}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getPost(slug) {\r\n  const requestOptions = {\r\n    method: 'GET'\r\n  };\r\n\r\n  return fetch(`${apiUrl}/${slug}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text);\r\n    if (!response.ok) {\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n","import { postConstants } from '../constants';\r\nimport { postService } from '../services';\r\n\r\nexport const postActions = {\r\n  getPosts,\r\n  clearPosts,\r\n  getPost\r\n};\r\n\r\nfunction getPosts(page = 1) {\r\n  return dispatch => {\r\n    dispatch(request());\r\n\r\n    postService.getPosts(page)\r\n      .then(\r\n        data => {\r\n          dispatch(success(data.posts));\r\n          dispatch(nextPage(data.posts.current_page + 1));\r\n        },\r\n        error => dispatch(failure(error.toString()))\r\n      );\r\n  };\r\n\r\n  function request() { return { type: postConstants.GET_POSTS_REQUEST } }\r\n  function success(posts) { return { type: postConstants.GET_POSTS_SUCCESS, posts } }\r\n  function nextPage(page) { return { type: postConstants.POSTS_NEXT_PAGE, page } }\r\n  function failure(error) { return { type: postConstants.GET_POSTS_FAILURE, error } }\r\n}\r\n\r\nfunction getPost(slug) {\r\n  return dispatch => {\r\n      dispatch(request());\r\n\r\n      postService.getPost(slug)\r\n          .then(\r\n              data => dispatch(success(data.posts[0])),\r\n              error => dispatch(failure(error.toString()))\r\n          );\r\n  };\r\n\r\n  function request() { return { type: postConstants.GET_POST_REQUEST } }\r\n  function success(post) { return { type: postConstants.GET_POST_SUCCESS, post } }\r\n  function failure(error) { return { type: postConstants.GET_POST_FAILURE, error } }\r\n}\r\n\r\nfunction clearPosts() {\r\n  return { type: postConstants.CLEAR_POSTS };\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport { Link } from \"react-router-dom\";\r\nimport * as moment from 'moment';\r\nimport 'moment/locale/id';\r\n\r\nconst PostList = ({posts}) => {\r\n  const postList = posts.map(post => (\r\n    <ListGroup.Item key={post.slug}>\r\n      <Row>\r\n        <Col xs={6} md={8}>\r\n          <span>{post.categories && post.categories[0].name}</span>\r\n          <Link to={`/${post.slug}`}><h3 dangerouslySetInnerHTML={{ __html: post.title }} /></Link>\r\n          <div dangerouslySetInnerHTML={{ __html: post.excerpt }} />\r\n          <Row>\r\n            <Col md={4}>\r\n              <Row>\r\n                <Col md={4}>\r\n                  <Image width={40} src={post.author && post.author.avatar_url} roundedCircle={true}/>\r\n                </Col>\r\n                <Col md={8}>\r\n                  <p>{post.author && post.author.first_name} {post.author && post.author.last_name}</p>\r\n                  <p>{moment(post.date).fromNow()}</p>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col style={{ textAlign: 'right' }} md={{ span: 4, offset: 4 }}>\r\n              {post.comments_count ? post.comments_count + ' Komentar' : ''}\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col xs={6} md={4}>\r\n          <Link to={`/${post.slug}`}><Image src={post.featured_image && post.featured_image.attachment_meta.sizes.medium.url} alt={post.featured_image && post.featured_image.description} /></Link>\r\n        </Col>\r\n      </Row>\r\n    </ListGroup.Item>\r\n  ));\r\n  \r\n  return (\r\n    <Card>\r\n      <ListGroup>\r\n        {postList}\r\n      </ListGroup>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { postActions } from '../actions';\r\nimport PostList from '../components/PostList';\r\n\r\nclass HomePage extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getPosts();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.clearPosts();\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n    return (\r\n      <>\r\n        {posts.error && <span className=\"text-danger\">ERROR: {posts.error}</span>}\r\n        {posts.posts &&  <PostList posts={posts.posts} />}\r\n        {posts.loading && <em>Loading posts...</em>}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { posts } = state;\r\n  return {\r\n    posts\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getPosts: (page) => dispatch(postActions.getPosts(page)),\r\n    clearPosts: postActions.clearPosts\r\n  };\r\n}\r\n\r\nconst connectedHomePage = connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\nexport { connectedHomePage as HomePage };\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Image from 'react-bootstrap/Image';\r\nimport moment from 'moment';\r\n\r\nconst Post = ({post}) => {\r\n  moment.locale('en');\r\n  return (\r\n    <Card className=\"post-wrapper\">\r\n      <Card.Title>\r\n        <p className=\"post-category\">{post.categories[0].name}</p>\r\n        <h1  className=\"post-heading\" dangerouslySetInnerHTML={{ __html: post.title }} />\r\n        <ul className=\"post-meta\">\r\n          <li className=\"post-meta__author-image\">\r\n            <Image width={32} src={post.author.avatar_url} roundedCircle={true}/>\r\n          </li>\r\n          <li>\r\n            <span>{post.author.first_name} {post.author.last_name}</span>\r\n            <time className=\"post-meta__date\" dateTime={post.date}>{moment(post.date).format('LT on LL')}</time>\r\n          </li>\r\n        </ul>\r\n      </Card.Title>\r\n      <Card.Body>\r\n        <Card.Img src={post.featured_image.source} />\r\n        <Card.Text className=\"post-content\" dangerouslySetInnerHTML={{ __html: post.content }} />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\nexport default Post;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { postActions } from '../actions';\r\nimport Post from '../components/Post';\r\n\r\nclass SinglePostPage extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getPost(this.props.slug);\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n    if (posts.blank) {\r\n      return (\r\n        <div>BLANK</div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        {posts.error && <span className=\"text-danger\">ERROR: {posts.error}</span>}\r\n        {posts.post &&  <Post post={posts.post} />}\r\n        {posts.loading && <em>Loading post...</em>}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const { posts } = state;\r\n  return {\r\n    posts,\r\n    slug: ownProps.match.params.slug\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getPost: (slug) => dispatch(postActions.getPost(slug))\r\n  };\r\n}\r\n\r\nconst connectedSinglePostPage = connect(mapStateToProps, mapDispatchToProps)(SinglePostPage);\r\nexport { connectedSinglePostPage as SinglePostPage };\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Card from 'react-bootstrap/Card';\n\nimport './App.css';\nimport { HomePage, SinglePostPage } from './pages';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <Card>\n            <Navbar>\n              <Navbar.Brand href=\"/\">microTIA</Navbar.Brand>\n              <Navbar.Toggle />\n            </Navbar>\n          </Card>\n          <Container>\n            <Route path=\"/\" exact component={HomePage} />\n            <Route path=\"/:slug\" component={SinglePostPage} />\n          </Container>\n        </React.Fragment>\n      </Router> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport { store, history } from './helpers';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter> \n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}